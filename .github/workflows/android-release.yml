name: "Android Release"

on:
  workflow_call:
    inputs:
      version:
        description: "Version to build"
        required: false
        type: string
      force_build:
        description: "Force build even if conditions not met"
        required: false
        default: false
        type: boolean
    outputs:
      apk_path:
        description: "Path to built APK"
        value: ${{ jobs.build-android.outputs.apk_path }}
      aab_path:
        description: "Path to built AAB"
        value: ${{ jobs.build-android.outputs.aab_path }}
  workflow_dispatch:
    inputs:
      force_release:
        description: "Force a release even if no changesets"
        required: false
        default: true
        type: boolean

concurrency:
  group: android-release
  cancel-in-progress: false

jobs:
  # Step 1: Check if we should build Android
  check-android-release:
    name: "Check Android Release Status"
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check release conditions
        id: check
        run: |
          # Check if this is a changeset release commit or force release
          COMMIT_MSG=$(git log -1 --pretty=format:"%s")
          echo "Latest commit: $COMMIT_MSG"

          # Check recent commits for changeset patterns
          RECENT_COMMITS=$(git log -5 --pretty=format:"%s")
          echo "Recent commits:"
          echo "$RECENT_COMMITS"

          IS_CHANGESET_RELEASE="false"
          if [[ "$COMMIT_MSG" == *"chore: release version packages"* ]] || \
             [[ "$COMMIT_MSG" == *"Version Packages"* ]] || \
             [[ "$COMMIT_MSG" == *"changeset-release/main"* ]] || \
             [[ "$RECENT_COMMITS" == *"chore: release version packages"* ]] || \
             [[ "$RECENT_COMMITS" == *"Version Packages"* ]]; then
            IS_CHANGESET_RELEASE="true"
            echo "✅ This is a changeset release commit"
          fi

          # Check for version changes in the last commit
          VERSION_CHANGED="false"
          if git diff HEAD~1 HEAD --name-only | grep -q "package.json\|src-tauri/Cargo.toml\|src-tauri/tauri.conf.json"; then
            echo "📦 Version files changed in recent commit"
            VERSION_CHANGED="true"
          fi

          # Determine if we should release
          SHOULD_RELEASE="false"
          if [[ "$IS_CHANGESET_RELEASE" == "true" ]] || \
             [[ "$VERSION_CHANGED" == "true" ]] || \
             [[ "${{ github.event.inputs.force_release }}" == "true" ]] || \
             [[ "${{ inputs.force_build }}" == "true" ]]; then
            SHOULD_RELEASE="true"
            echo "✅ Android release conditions met"
          else
            echo "ℹ️ No Android release needed"
          fi

          # Get current version (use input version if provided, otherwise from package.json)
          if [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
            echo "📦 Using provided version: $VERSION"
          else
            VERSION=$(node -p "require('./package.json').version")
            echo "📦 Using package.json version: $VERSION"
          fi

          echo "should_release=$SHOULD_RELEASE" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  # Step 2: Build Android APK
  build-android:
    name: "Build Android APK"
    needs: check-android-release
    if: needs.check-android-release.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      apk_path: ${{ steps.build_info.outputs.apk_path }}
      aab_path: ${{ steps.build_info.outputs.aab_path }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-linux-android,armv7-linux-androideabi,i686-linux-android,x86_64-linux-android

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android NDK
        run: |
          echo "Installing Android NDK..."
          sdkmanager "ndk;25.2.9519653"
          echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV
          echo "NDK_HOME=$ANDROID_SDK_ROOT/ndk/25.2.9519653" >> $GITHUB_ENV

      - name: Cache Rust dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            src-tauri/target
          key: ${{ runner.os }}-android-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-android-cargo-
            ${{ runner.os }}-cargo-

      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            src-tauri/gen/android/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Cache Node dependencies
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.pnpm-store
          key: ${{ runner.os }}-android-node-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-android-node-
            ${{ runner.os }}-node-

      - name: Cache Android build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist
            src-tauri/gen/android/app/build
          key: ${{ runner.os }}-android-build-${{ hashFiles('**/package.json', '**/Cargo.toml') }}
          restore-keys: |
            ${{ runner.os }}-android-build-

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build

      - name: Validate Android build prerequisites
        run: |
          echo "🔍 Validating Android build prerequisites..."

          # Check Java version
          java -version

          # Check Android SDK
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME"

          # Validate Android project structure
          if [[ ! -d "src-tauri/gen/android" ]]; then
            echo "❌ Android project directory missing"
            exit 1
          fi

          # Check if Android targets are installed
          if ! rustup target list --installed | grep -q "aarch64-linux-android"; then
            echo "📦 Installing Android targets..."
            rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android x86_64-linux-android
          fi

          echo "✅ Android build prerequisites validated"

      - name: Install Tauri CLI
        run: cargo install tauri-cli --version "^2.0" --locked

      - name: Setup Android signing
        if: env.ANDROID_KEYSTORE_BASE64 != ''
        run: |
          echo "Setting up Android signing..."

          # Decode and save keystore to the Android project directory
          echo "$ANDROID_KEYSTORE_BASE64" | base64 -d > src-tauri/gen/android/release.keystore

          # Create key.properties file with correct paths
          cat > src-tauri/gen/android/key.properties << EOF
          storeFile=../release.keystore
          storePassword=$ANDROID_KEYSTORE_PASSWORD
          keyAlias=$ANDROID_KEY_ALIAS
          keyPassword=$ANDROID_KEY_PASSWORD
          EOF

          echo "✅ Android signing configured"
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Build Android Release
        id: android_build
        continue-on-error: true
        run: |
          echo "🔨 Building Android release for aarch64..."

          cd src-tauri

          # Set build environment
          export ANDROID_NDK_HOME="$ANDROID_NDK_HOME"
          export NDK_HOME="$NDK_HOME"

          if [[ -n "$ANDROID_KEYSTORE_BASE64" ]]; then
              echo "🔐 Building signed release APK and AAB..."
          else
              echo "⚠️ No signing keys provided - building unsigned release"
          fi

          # Attempt build with retry logic
          set +e
          cargo tauri android build --target aarch64 --verbose
          BUILD_EXIT_CODE=$?
          set -e

          if [[ $BUILD_EXIT_CODE -ne 0 ]]; then
            echo "❌ First build attempt failed (exit code: $BUILD_EXIT_CODE)"
            echo "🔄 Attempting clean build..."
            
            # Clean and retry
            cargo clean
            cargo tauri android build --target aarch64 --verbose
            BUILD_EXIT_CODE=$?
            
            if [[ $BUILD_EXIT_CODE -ne 0 ]]; then
              echo "❌ Build failed after retry (exit code: $BUILD_EXIT_CODE)"
              echo "build_success=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi

          echo "✅ Android build completed successfully"
          echo "build_success=true" >> $GITHUB_OUTPUT

      - name: Handle Android Build Failure
        if: steps.android_build.outcome == 'failure'
        run: |
          echo "❌ Android build failed"
          echo "📊 Build diagnostics:"
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          echo "Java version: $(java -version 2>&1)"
          echo "Android SDK: $ANDROID_SDK_ROOT"
          echo "Android NDK: $ANDROID_NDK_HOME"

          # List available targets
          echo "Available Rust targets:"
          rustup target list --installed

          # Check Android project structure
          if [[ -d "src-tauri/gen/android" ]]; then
            echo "Android project structure:"
            ls -la src-tauri/gen/android/
          fi

          echo "⚠️ Android build failed - continuing with desktop builds only"

      - name: Process Android Artifacts
        if: steps.android_build.outcome == 'success'
        run: |
          echo "📱 Processing Android build artifacts..."

          # Rename build files using script
          cd ..
          if [[ -f "rename-android-builds.sh" ]]; then
            chmod +x rename-android-builds.sh
            ./rename-android-builds.sh
          else
            echo "⚠️ rename-android-builds.sh not found, using default naming"
          fi

          # List created files
          echo "📱 Created files:"
          find . -name "*.apk" -o -name "*.aab" | while read file; do
            if [[ -f "$file" ]]; then
              SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
              echo "✅ $file ($SIZE bytes)"
            fi
          done
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}

      - name: Generate build timestamp
        id: timestamp
        run: echo "build_time=$(date -u +"%Y-%m-%d %H:%M UTC")" >> $GITHUB_OUTPUT

      - name: Validate and organize build artifacts
        id: build_info
        run: |
          echo "📱 Validating and organizing Android build artifacts..."

          # Find actual build files
          APK_FILES=$(find . -name "*.apk" -type f)
          AAB_FILES=$(find . -name "*.aab" -type f)

          echo "Found APK files: $APK_FILES"
          echo "Found AAB files: $AAB_FILES"

          # Validate artifacts exist and are not empty
          if [[ -z "$APK_FILES" ]] && [[ -z "$AAB_FILES" ]]; then
            echo "❌ No Android artifacts found"
            exit 1
          fi

          # Create standardized names and move to root directory
          VERSION="${{ needs.check-android-release.outputs.version }}"
          APK_NAME="mpesa2csv-v${VERSION}-universal-release.apk"
          AAB_NAME="mpesa2csv-v${VERSION}-universal-release.aab"

          # Copy APK if found
          if [[ -n "$APK_FILES" ]]; then
            APK_FILE=$(echo "$APK_FILES" | head -1)
            cp "$APK_FILE" "./$APK_NAME"
            echo "✅ APK copied: $APK_NAME"
            echo "apk_path=$APK_NAME" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No APK file found"
            echo "apk_path=" >> $GITHUB_OUTPUT
          fi

          # Copy AAB if found
          if [[ -n "$AAB_FILES" ]]; then
            AAB_FILE=$(echo "$AAB_FILES" | head -1)
            cp "$AAB_FILE" "./$AAB_NAME"
            echo "✅ AAB copied: $AAB_NAME"
            echo "aab_path=$AAB_NAME" >> $GITHUB_OUTPUT
          else
            echo "⚠️ No AAB file found"
            echo "aab_path=" >> $GITHUB_OUTPUT
          fi

          # Validate file sizes
          for file in *.apk *.aab; do
            if [[ -f "$file" ]]; then
              SIZE=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null)
              if [[ $SIZE -lt 1000000 ]]; then  # Less than 1MB is suspicious
                echo "⚠️ Artifact $file is suspiciously small ($SIZE bytes)"
              else
                echo "✅ $file ($SIZE bytes)"
              fi
            fi
          done

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mpesa2csv-v${{ needs.check-android-release.outputs.version }}
          path: |
            *.apk
            *.aab
          retention-days: 30
          if-no-files-found: warn
