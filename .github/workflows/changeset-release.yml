name: "Changeset Release"

on:
  push:
    branches: [main]
  workflow_dispatch:

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Install Dependencies
        run: pnpm install

      - name: Create Release Pull Request or Publish to GitHub
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm run release
          version: pnpm run version
          title: "chore: release version packages"
          commit: "chore: release version packages"
          createGithubReleases: false # We'll handle this in the build workflow
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Sync versions after changesets
        if: steps.changesets.outputs.hasChangesets == 'true' || steps.changesets.outputs.published == 'true'
        run: |
          echo "üì¶ Ensuring all version files are synced..."
          pnpm run sync-versions

          # Check if there are any changes to commit
          if ! git diff --quiet; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add .
            git commit -m "chore: sync version files after changesets"
            git push
            echo "‚úÖ Version files synced and committed"
          else
            echo "‚ÑπÔ∏è No version sync changes needed"
          fi

      - name: Create Git Tag
        if: steps.changesets.outputs.published == 'true'
        run: |
          # Get the version from package.json
          VERSION=$(node -p "require('./package.json').version")
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push origin "v$VERSION"

      - name: Trigger Build Workflow
        if: steps.changesets.outputs.published == 'true'
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: version-published
          client-payload: '{"packages": ${{ steps.changesets.outputs.publishedPackages }}}'
